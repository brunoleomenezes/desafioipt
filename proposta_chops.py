# -*- coding: utf-8 -*-
"""proposta_chops.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dl_87h_VRITsSfioYTIgx_bp-4PF4CZ1

Autor: Bruno Leonardo Santos Menezes - professor.menezesbruno@gmail.com
"""

#!pip install sentence-transformers --quiet
#!pip install faiss-cpu --quiet

# Exemplo de "corpus" (guia/FAQ) em português
FAQ_TEXTS = [
    "Para adicionar estudantes, vá até o painel 'Estudantes' e clique em 'Novo'.",
    "A prova do CPHOS custa R$ 0, pois é oferecida gratuitamente.",
    "Para visualizar notas, acesse o menu 'Notas' e selecione o usuário desejado.",
    "Para alterar a disciplina de correção, utilize a configuração no painel de correções."
]

# Exemplo de "base de dados" (simulada) de usuários
# Vamos usar um dicionário e tratá-lo como nosso "sistema"
USER_DB = {
    "maria": {"id": 1, "nome": "Maria", "disciplina": "Física", "adm": True},
    "joao":  {"id": 2, "nome": "João",  "disciplina": "Matemática", "adm": False},
}

import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

# 1) Carregar modelo de embeddings (português ou multilíngue)
model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')

# 2) Criar embeddings do corpus
faq_embeddings = model.encode(FAQ_TEXTS)

# 3) Criar índice FAISS
dimension = faq_embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(faq_embeddings)

def retrieve_faq_responses(query, top_k=1):
    """Retorna o(s) trecho(s) de FAQ mais semelhante(s) à query."""
    query_emb = model.encode([query])
    distances, indices = index.search(query_emb, top_k)
    results = []
    for i in range(top_k):
        faq_idx = indices[0, i]
        results.append(FAQ_TEXTS[faq_idx])
    return results

def consultar_usuario(username):
    """Retorna dados do usuário ou None."""
    username = username.lower()
    return USER_DB.get(username, None)

def alterar_disciplina(username, nova_disciplina):
    """Altera a disciplina associada a certo usuário, se ele existir."""
    username = username.lower()
    if username in USER_DB:
        USER_DB[username]["disciplina"] = nova_disciplina
        return True
    return False

def is_admin(username):
    """Verifica se o usuário é admin."""
    user = USER_DB.get(username.lower())
    if user:
        return user["adm"]
    return False

import re

def classify_user_text(user_text):
    text_lower = user_text.lower()

    # Exemplo 0: algo trivííal ("oi", "bom dia", etc.)
    if any(x in text_lower for x in ["oi", "olá", "bom dia", "boa tarde"]):
        return 0  # Básica

    # Exemplo 1: perguntas sobre "como", "quanto custa", "para que serve" => FAQ
    if re.search(r"(como)|(quanto)|(para que)|(custa)|(test)|(guia)", text_lower):
        return 1  # FAQ

    # Exemplo 2: perguntas que mencionam "disciplina", "alterar", "mudar", "usuário"
    if re.search(r"(disciplina)|(mudar)|(usuário)|(user)|(alterar)|(admin)|(estudante)", text_lower):
        return 2  # Ações no Sistema

    # Caso padrão
    return 0

def executor(user_text, classification):
    """Retorna (resposta_texto, operacao_sistema)"""

    # Por padrão, não há operação no sistema
    operacao_sistema = None
    resposta = ""

    if classification == 0:
        # Resposta básica
        resposta = "Olá! Como posso ajudar?"

    elif classification == 1:
        # Recuperar do FAQ
        trechos = retrieve_faq_responses(user_text, top_k=1)
        resposta = f"Baseado no guia, encontrei: {trechos[0]}"

    elif classification == 2:
        # Exemplo: se o texto tiver 'alterar disciplina' e um nome, chamamos API
        text_lower = user_text.lower()

        # Checa se é 'consultar usuário'
        match_user = re.search(r"usuário\s+(\w+)", text_lower)
        if match_user:
            username = match_user.group(1)
            user_data = consultar_usuario(username)
            if user_data:
                resposta = f"Dados de {username}: {user_data}"
            else:
                resposta = f"Usuário {username} não encontrado."

        # Checa se é 'mudar/alterar disciplina'
        match_disc = re.search(r"(mudar|alterar)\s+disciplina\s+(\w+)\s+(\w+)", text_lower)
        if match_disc:
            old_or_user = match_disc.group(2)  # suposição
            new_disc = match_disc.group(3)
            # Exemplo: "alterar disciplina joao física"
            ok = alterar_disciplina(old_or_user, new_disc)
            if ok:
                resposta = f"Disciplina de {old_or_user} alterada para {new_disc}."
            else:
                resposta = f"Não consegui alterar disciplina de {old_or_user}."
            operacao_sistema = ("alterar_disciplina", old_or_user, new_disc)

        if resposta == "":
            resposta = "Parece ser algo relacionado ao sistema, mas não entendi a solicitação."

    return resposta, operacao_sistema

def verifier(resposta, operacao_sistema, user_text):
    """Retorna (eh_valido, motivo_ou_none)"""
    if not operacao_sistema:
        # Se não há operação no sistema, consideramos sempre "válido"
        return True, None

    # Exemplo de verificação: se for "alterar_disciplina"
    if operacao_sistema[0] == "alterar_disciplina":
        # operacao_sistema = ("alterar_disciplina", old_or_user, new_disc)
        user_alvo = operacao_sistema[1]

        # Vamos supor que quem faz a pergunta é o próprio user_text (ingênuo)
        # e se não for admin, não pode alterar outro
        # -> Em um sistema real, você teria "quem fez a requisição" e "sobre quem"
        # Para simplicidade, assumamos que nome do usuário está no input:

        match_solicitante = re.search(r"eu sou\s+(\w+)", user_text.lower())
        if match_solicitante:
            solicitante = match_solicitante.group(1)
            if not is_admin(solicitante) and solicitante != user_alvo.lower():
                return False, "Usuário não tem privilégios para alterar disciplina de outra pessoa."
        # Se passou daqui, consideramos válido
    return True, None

def chatbot_pipeline(user_text):
    # 1) Classifier
    c = classify_user_text(user_text)

    # 2) Executor
    resposta, operacao = executor(user_text, c)

    # 3) Verifier
    valido, motivo = verifier(resposta, operacao, user_text)

    if valido:
        return f"[Resposta VÁLIDA]\n{resposta}"
    else:
        # Se for inválido, retornamos a razão e uma "segunda tentativa" simples
        return f"[Resposta INVÁLIDA]\nMotivo: {motivo}\nPor favor, reformule ou tente outra ação."

# Exemplo 1: Pergunta trivial
print(chatbot_pipeline("Oi, tudo bem?"))

# Exemplo 2: Pergunta de FAQ
print(chatbot_pipeline("Quanto custa a prova do CPHOS?"))

# Exemplo 3: Consulta de usuário
print(chatbot_pipeline("Me mostre dados do usuário Joao"))

# Exemplo 4: Alterar disciplina, mas sem dizer quem sou
print(chatbot_pipeline("Quero alterar disciplina Joao Fisica"))

# Exemplo 5: Alterar disciplina, mas dizendo que sou "Maria" (que é admin)
texto = "Eu sou Maria. Gostaria de alterar disciplina Joao Matematica"
print(chatbot_pipeline(texto))

# Exemplo 6: Alterar disciplina, dizendo que sou Joao e quero mudar a do outro
texto2 = "Eu sou Joao. Desejo alterar disciplina Maria Fisica"
print(chatbot_pipeline(texto2))
